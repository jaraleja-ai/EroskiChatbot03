# =====================================================
# nodes/verify.py - Nodo de Verificaci√≥n de Resoluci√≥n
# =====================================================
"""
Nodo para verificar si la soluci√≥n proporcionada ha resuelto el problema.

RESPONSABILIDADES:
- Confirmar con el usuario si el problema se ha resuelto
- Recopilar feedback sobre la soluci√≥n
- Actualizar estado de resoluci√≥n
- Determinar si necesita escalaci√≥n adicional
"""

from typing import Dict, Any, Optional, List
from langchain_core.messages import AIMessage, HumanMessage
from langgraph.types import Command
from datetime import datetime
import logging
import re

from models.eroski_state import EroskiState
from nodes.base_node import BaseNode

class VerifyResolutionNode(BaseNode):
    """
    Nodo para verificar resoluci√≥n de problemas.
    
    CARACTER√çSTICAS:
    - Confirmaci√≥n interactiva con el usuario
    - Recopilaci√≥n de feedback
    - Actualizaci√≥n de m√©tricas
    - Escalaci√≥n si no se resuelve
    """
    
    def __init__(self):
        super().__init__("VerifyResolution")
        
        # Palabras clave para respuestas positivas
        self.positive_keywords = [
            "s√≠", "si", "yes", "resuelto", "solucionado", "funcionando",
            "funciona", "perfecto", "bien", "correcto", "gracias"
        ]
        
        # Palabras clave para respuestas negativas
        self.negative_keywords = [
            "no", "not", "sigue", "todav√≠a", "a√∫n", "problema",
            "error", "fallo", "mal", "incorrecto"
        ]
        
        # Palabras clave para respuestas parciales
        self.partial_keywords = [
            "parcialmente", "algo", "un poco", "mejora", "mejor",
            "pero", "aunque", "sin embargo"
        ]
    
    def get_required_fields(self) -> List[str]:
        return ["messages", "solution_found", "solution_content"]
    
    def get_actor_description(self) -> str:
        return "Verifico si las soluciones proporcionadas han resuelto el problema del usuario"
    
    async def execute(self, state: EroskiState) -> Command:
        """
        Ejecutar verificaci√≥n de resoluci√≥n.
        
        Args:
            state: Estado actual del workflow
            
        Returns:
            Command con el resultado de la verificaci√≥n
        """
        try:
            # Verificar si ya tenemos una respuesta del usuario
            user_response = self.get_last_user_message(state)
            
            if not user_response:
                return self._request_confirmation(state)
            
            # Analizar respuesta del usuario
            resolution_status = self._analyze_user_response(user_response)
            
            # Procesar basado en el estado de resoluci√≥n
            if resolution_status == "resolved":
                return self._handle_resolution_success(state, user_response)
            elif resolution_status == "not_resolved":
                return self._handle_resolution_failure(state, user_response)
            elif resolution_status == "partial":
                return self._handle_partial_resolution(state, user_response)
            else:
                return self._request_clarification(state)
                
        except Exception as e:
            self.logger.error(f"‚ùå Error en verificaci√≥n: {e}")
            return self._escalate_error(state, str(e))
    
    def _analyze_user_response(self, response: str) -> str:
        """Analizar respuesta del usuario para determinar estado de resoluci√≥n"""
        response_lower = response.lower()
        
        # Contar palabras clave de cada tipo
        positive_count = sum(1 for keyword in self.positive_keywords if keyword in response_lower)
        negative_count = sum(1 for keyword in self.negative_keywords if keyword in response_lower)
        partial_count = sum(1 for keyword in self.partial_keywords if keyword in response_lower)
        
        # L√≥gica de decisi√≥n
        if positive_count > negative_count and partial_count == 0:
            return "resolved"
        elif negative_count > positive_count:
            return "not_resolved"
        elif partial_count > 0:
            return "partial"
        else:
            return "unclear"
    
    def _request_confirmation(self, state: EroskiState) -> Command:
        """Solicitar confirmaci√≥n de resoluci√≥n al usuario"""
        
        solution_content = state.get("solution_content", {})
        solution_title = solution_content.get("title", "soluci√≥n proporcionada") if isinstance(solution_content, dict) else "soluci√≥n proporcionada"
        
        confirmation_message = f"""‚úÖ **VERIFICACI√ìN DE RESOLUCI√ìN**

Has seguido los pasos de la **{solution_title}**.

**¬øSe ha resuelto tu problema?**

Por favor, responde con una de estas opciones:
‚Ä¢ **"S√≠, est√° resuelto"** - Si el problema se solucion√≥ completamente
‚Ä¢ **"No, sigue sin funcionar"** - Si el problema persiste
‚Ä¢ **"Funciona parcialmente"** - Si mejor√≥ pero a√∫n hay problemas

**Tu respuesta me ayudar√° a:**
‚Ä¢ Cerrar el ticket si est√° resuelto
‚Ä¢ Buscar soluciones alternativas si es necesario  
‚Ä¢ Escalarlo a un especialista si es complejo

**¬øC√≥mo est√° funcionando ahora?** ü§î"""
        
        return Command(update={
            "messages": [AIMessage(content=confirmation_message)],
            "awaiting_user_input": True,
            "current_node": "verify",
            "last_activity": datetime.now(),
            "verification_stage": "awaiting_confirmation"
        })
    
    def _handle_resolution_success(self, state: EroskiState, user_response: str) -> Command:
        """Manejar resoluci√≥n exitosa"""
        
        # Calcular tiempo de resoluci√≥n
        resolution_time = self._calculate_resolution_time(state)
        
        # Recopilar feedback
        feedback = self._extract_feedback(user_response)
        
        success_message = f"""üéâ **¬°PROBLEMA RESUELTO CON √âXITO!**

¬°Excelente! Me alegra saber que el problema se ha solucionado.

**üìä Resumen de la resoluci√≥n:**
‚Ä¢ **Tiempo total:** {resolution_time}
‚Ä¢ **Soluci√≥n aplicada:** {self._get_solution_summary(state)}
‚Ä¢ **Tu feedback:** {feedback}

**üìã Ticket cerrado:** {state.get('ticket_number', 'N/A')}

**üåü ¬°Gracias por tu colaboraci√≥n!** 
Tu problema ha sido resuelto satisfactoriamente y el ticket ha sido cerrado.

**üìû ¬øNecesitas m√°s ayuda?**
Si tienes otros problemas o consultas, no dudes en contactarme de nuevo.

¬°Que tengas un buen d√≠a! üòä"""
        
        return Command(update={
            "resolved": True,
            "automated_resolution": True,
            "resolution_time": resolution_time,
            "user_feedback": feedback,
            "solution_effective": True,
            "ticket_status": "Cerrada",
            "messages": [AIMessage(content=success_message)],
            "current_node": "verify",
            "last_activity": datetime.now(),
            "awaiting_user_input": False,
            "flow_completed": True
        })
    
    def _handle_resolution_failure(self, state: EroskiState, user_response: str) -> Command:
        """Manejar fallo en la resoluci√≥n"""
        
        attempts = state.get("verification_attempts", 0)
        
        if attempts >= 1:  # Despu√©s de 1 intento fallido, escalar
            return self._escalate_unresolved_issue(state, user_response)
        
        failure_message = """üòî **El problema a√∫n persiste**

Entiendo que la soluci√≥n no ha funcionado completamente.

**Opciones disponibles:**
‚Ä¢ **Intentar una soluci√≥n alternativa** - Tengo otras opciones que pueden funcionar
‚Ä¢ **Escalarlo a soporte t√©cnico** - Un especialista puede ayudarte mejor
‚Ä¢ **Revisi√≥n presencial** - Solicitar que alguien revise el equipo f√≠sicamente

**Para ayudarte mejor, cu√©ntame:**
‚Ä¢ ¬øQu√© pas√≥ exactamente cuando seguiste los pasos?
‚Ä¢ ¬øHay alg√∫n mensaje de error espec√≠fico?
‚Ä¢ ¬øEl problema es exactamente igual que antes?

**¬øQu√© prefieres que haga?** ü§î"""
        
        return Command(update={
            "resolved": False,
            "solution_effective": False,
            "verification_attempts": attempts + 1,
            "messages": [AIMessage(content=failure_message)],
            "awaiting_user_input": True,
            "current_node": "verify",
            "last_activity": datetime.now(),
            "verification_stage": "solution_failed"
        })
    
    def _handle_partial_resolution(self, state: EroskiState, user_response: str) -> Command:
        """Manejar resoluci√≥n parcial"""
        
        partial_message = """üîÑ **Resoluci√≥n parcial detectada**

Entiendo que la soluci√≥n ha mejorado el problema pero no lo ha resuelto completamente.

**Esto es normal** - a veces los problemas t√©cnicos requieren varios pasos.

**Opciones para completar la soluci√≥n:**
‚Ä¢ **Pasos adicionales** - Puedo sugerir acciones complementarias
‚Ä¢ **Soluci√≥n alternativa** - Intentar un enfoque diferente
‚Ä¢ **Soporte especializado** - Escalarlo para una revisi√≥n m√°s detallada

**Para ayudarte mejor:**
‚Ä¢ ¬øQu√© parte funciona bien ahora?
‚Ä¢ ¬øQu√© aspecto a√∫n no est√° funcionando?
‚Ä¢ ¬øPrefieres intentar m√°s pasos o que lo derive a un especialista?

**¬øC√≥mo quieres proceder?** ü§î"""
        
        return Command(update={
            "resolved": False,
            "solution_effective": "partial",
            "partial_resolution": True,
            "messages": [AIMessage(content=partial_message)],
            "awaiting_user_input": True,
            "current_node": "verify",
            "last_activity": datetime.now(),
            "verification_stage": "partial_resolution"
        })
    
    def _request_clarification(self, state: EroskiState) -> Command:
        """Solicitar clarificaci√≥n cuando la respuesta no es clara"""
        
        clarification_message = """‚ùî **Necesito aclaraci√≥n**

No he podido entender claramente si el problema se ha resuelto.

**Por favor, responde de forma clara:**
‚Ä¢ **"S√≠, funciona perfectamente"** ‚úÖ
‚Ä¢ **"No, sigue igual"** ‚ùå  
‚Ä¢ **"Funciona mejor pero a√∫n hay problemas"** üîÑ

**¬øPodr√≠as confirmar el estado actual del problema?** ü§î"""
        
        attempts = state.get("verification_attempts", 0)
        
        if attempts >= 2:
            return self._escalate_unclear_status(state)
        
        return Command(update={
            "messages": [AIMessage(content=clarification_message)],
            "verification_attempts": attempts + 1,
            "awaiting_user_input": True,
            "current_node": "verify",
            "last_activity": datetime.now(),
            "verification_stage": "awaiting_clarification"
        })
    
    def _escalate_unresolved_issue(self, state: EroskiState, user_response: str) -> Command:
        """Escalar problema no resuelto"""
        
        escalation_message = """üîº **ESCALANDO A SOPORTE ESPECIALIZADO**

El problema no se ha resuelto con las soluciones autom√°ticas disponibles.

**Te he derivado a soporte t√©cnico especializado** que podr√°:
‚Ä¢ Revisar el problema en detalle
‚Ä¢ Aplicar soluciones avanzadas
‚Ä¢ Realizar diagn√≥sticos espec√≠ficos
‚Ä¢ Hacer revisi√≥n presencial si es necesario

**üìã Informaci√≥n transferida:**
‚Ä¢ Ticket original: {ticket_number}
‚Ä¢ Soluciones intentadas: {solution_summary}
‚Ä¢ Feedback del usuario: {user_feedback}

**üìû Contacto directo:**
‚Ä¢ Soporte t√©cnico: +34 946 211 000
‚Ä¢ Menciona el ticket: {ticket_number}

**‚è∞ Tiempo de respuesta:** 15-30 minutos

¬°Gracias por tu paciencia! El equipo especializado se pondr√° en contacto contigo pronto. ü§ù""".format(
            ticket_number=state.get("ticket_number", "N/A"),
            solution_summary=self._get_solution_summary(state),
            user_feedback=user_response[:100]
        )
        
        return Command(update={
            "escalation_needed": True,
            "escalation_reason": "Soluci√≥n autom√°tica no efectiva",
            "escalation_level": "technical",
            "resolved": False,
            "solution_effective": False,
            "messages": [AIMessage(content=escalation_message)],
            "current_node": "verify",
            "last_activity": datetime.now(),
            "awaiting_user_input": False,
            "flow_completed": True
        })
    
    def _escalate_unclear_status(self, state: EroskiState) -> Command:
        """Escalar por estado no claro"""
        
        return Command(update={
            "escalation_needed": True,
            "escalation_reason": "No se pudo verificar el estado de resoluci√≥n",
            "escalation_level": "supervisor",
            "messages": [
                AIMessage(content="No he podido verificar el estado de resoluci√≥n. Te derivo a un supervisor para asistencia personalizada.")
            ],
            "current_node": "verify",
            "last_activity": datetime.now(),
            "awaiting_user_input": False
        })
    
    def _calculate_resolution_time(self, state: EroskiState) -> str:
        """Calcular tiempo de resoluci√≥n"""
        start_time = state.get("start_time")
        if not start_time:
            return "N/A"
        
        resolution_time = datetime.now() - start_time
        minutes = int(resolution_time.total_seconds() / 60)
        
        if minutes < 1:
            return "menos de 1 minuto"
        elif minutes < 60:
            return f"{minutes} minutos"
        else:
            hours = minutes // 60
            remaining_minutes = minutes % 60
            return f"{hours}h {remaining_minutes}m"
    
    def _extract_feedback(self, user_response: str) -> str:
        """Extraer feedback √∫til de la respuesta del usuario"""
        # Buscar frases positivas espec√≠ficas
        positive_phrases = [
            "funciona perfectamente", "muy bien", "excelente", 
            "r√°pido", "f√°cil", "claro", "√∫til"
        ]
        
        response_lower = user_response.lower()
        feedback_elements = []
        
        for phrase in positive_phrases:
            if phrase in response_lower:
                feedback_elements.append(phrase)
        
        if feedback_elements:
            return f"Positivo: {', '.join(feedback_elements)}"
        else:
            return "Resoluci√≥n confirmada"
    
    def _get_solution_summary(self, state: EroskiState) -> str:
        """Obtener resumen de la soluci√≥n aplicada"""
        solution_content = state.get("solution_content", {})
        
        if isinstance(solution_content, dict):
            return solution_content.get("title", "Soluci√≥n autom√°tica")
        else:
            return "Soluci√≥n autom√°tica"
    
    def _escalate_error(self, state: EroskiState, error_message: str) -> Command:
        """Escalar por error t√©cnico"""
        return Command(update={
            "escalation_needed": True,
            "escalation_reason": f"Error t√©cnico en verificaci√≥n: {error_message}",
            "escalation_level": "technical",
            "messages": [
                AIMessage(content="Ha ocurrido un error t√©cnico. Te derivo a soporte t√©cnico.")
            ],
            "current_node": "verify",
            "last_activity": datetime.now(),
            "error_count": state.get("error_count", 0) + 1
        })

# ========== WRAPPER PARA LANGGRAPH ==========

async def verify_resolution_node(state: EroskiState) -> Command:
    """
    Wrapper function para el nodo de verificaci√≥n de resoluci√≥n.
    
    Args:
        state: Estado actual del workflow
        
    Returns:
        Command con la actualizaci√≥n de estado
    """
    node = VerifyResolutionNode()
    return await node.execute(state)