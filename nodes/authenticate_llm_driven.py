# =====================================================
# nodes/authenticate_llm_driven.py - Nodo de Autenticaci√≥n LLM-Driven
# =====================================================
"""
Nodo de autenticaci√≥n inteligente dirigido completamente por LLM.

FUNCIONALIDAD NUEVA:
1. LLM dirige toda la conversaci√≥n desde el primer mensaje
2. Recopila datos de forma natural y eficiente
3. Maneja informaci√≥n m√∫ltiple en un solo intercambio
4. Busca en BD autom√°ticamente cuando detecta email
5. Adaptaci√≥n contextual inteligente
6. Fallback robusto en caso de errores
"""

from typing import Dict, Any, Optional, List, Union
from langchain_core.messages import AIMessage, HumanMessage
from langgraph.types import Command
from datetime import datetime
import logging
import json
import re

from models.eroski_state import EroskiState
from nodes.base_node import BaseNode
from utils.eroski_database_auth import EroskiEmployeeDatabaseAuth
from utils.llm.providers import get_llm
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser
from pydantic import BaseModel, Field


# =============================================================================
# MODELOS DE DATOS
# =============================================================================

class ConversationDecision(BaseModel):
    """Decisi√≥n del LLM sobre qu√© hacer en la conversaci√≥n"""
    
    # Estado de la recopilaci√≥n
    is_complete: bool = Field(description="Si tiene todos los datos necesarios")
    should_search_database: bool = Field(description="Si debe buscar en base de datos")
    wants_to_cancel: bool = Field(description="Si el usuario quiere cancelar")
    
    # Datos extra√≠dos del mensaje actual
    extracted_data: Dict[str, Any] = Field(description="Datos extra√≠dos del mensaje")
    
    # Pr√≥xima acci√≥n
    next_action: str = Field(description="Pr√≥xima acci√≥n: collect_data, search_db, complete, cancel, clarify")
    message_to_user: str = Field(description="Mensaje natural para el usuario")
    
    # Informaci√≥n de estado
    missing_fields: List[str] = Field(description="Campos que a√∫n faltan", default=[])
    confidence_level: float = Field(description="Confianza en la extracci√≥n (0-1)", default=0.0)


# =============================================================================
# NODO PRINCIPAL LLM-DRIVEN
# =============================================================================

class LLMDrivenAuthenticateNode(BaseNode):
    """
    Nodo de autenticaci√≥n completamente dirigido por LLM.
    
    CARACTER√çSTICAS:
    - Conversaci√≥n natural desde el primer intercambio
    - Recopilaci√≥n inteligente de m√∫ltiples datos por mensaje
    - B√∫squeda autom√°tica en BD cuando detecta email
    - Sin etapas fijas - flujo adaptativo
    - Fallback robusto ante errores
    """
    
    def __init__(self):
        super().__init__("authenticate")
        self.max_attempts = 5  # Menos intentos porque es m√°s eficiente
        self.db_auth = EroskiEmployeeDatabaseAuth()
        self.llm = get_llm()
        
        # Parser para decisiones LLM
        self.parser = JsonOutputParser(pydantic_object=ConversationDecision)
        
        # Sistema principal de conversaci√≥n
        self.conversation_prompt = self._build_conversation_prompt()
        
        # Campos requeridos para completar autenticaci√≥n
        self.required_fields = {
            "name": "Nombre completo del empleado",
            "email": "Email (no obligatorio que sea @eroski.es)",
            "store_name": "Nombre de la tienda donde trabaja",
            "section": "Secci√≥n espec√≠fica donde ocurri√≥ la incidencia"
        }
    
    def get_required_fields(self) -> List[str]:
        return ["messages"]
    
    def get_actor_description(self) -> str:
        return "Recopilo datos de empleados usando conversaci√≥n natural dirigida por IA"
    
    async def execute(self, state: EroskiState) -> Command:
        """
        Ejecutar autenticaci√≥n LLM-driven.
        
        Args:
            state: Estado actual del workflow
            
        Returns:
            Command con la siguiente acci√≥n
        """

        self.logger.info("üèÖ"*50)
        self.logger.info(f"üåÑJGL entrando en {self.__class__.__name__}")
        try:
            self.logger.info("ü§ñ Iniciando autenticaci√≥n LLM-driven")
            
            # 1. Verificar si ya est√° completo
            if self._is_authentication_complete(state):
                return self._proceed_to_next_step(state)
            
            # 2. Primera visita - mensaje inteligente de bienvenida
            if self._is_first_visit(state):
                return await self._start_intelligent_conversation(state)
            
            # 3. Continuar conversaci√≥n dirigida por LLM
            return await self._continue_llm_conversation(state)
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en autenticaci√≥n LLM: {e}")
            return await self._handle_llm_error(state, str(e))
    
    # =========================================================================
    # L√ìGICA PRINCIPAL DE CONVERSACI√ìN
    # =========================================================================
    
    async def _start_intelligent_conversation(self, state: EroskiState) -> Command:
        """Iniciar conversaci√≥n inteligente"""
        
        welcome_message = """¬°Hola! üëã Soy tu asistente de incidencias t√©cnicas de Eroski.

Para ayudarte de la manera m√°s eficiente, necesito conocer algunos datos:

üîπ **Tu nombre completo**
üîπ **Tu email** (no tiene que ser necesariamente @eroski.es)  
üîπ **Nombre de tu tienda** (ej: "Eroski Bilbao Centro")
üîπ **Secci√≥n donde ocurri√≥ el problema** (ej: "Carnicer√≠a", "Caja", "Almac√©n")

Puedes darme **toda la informaci√≥n de una vez** o por partes, como prefieras. üòä

**Ejemplo:** *"Hola, soy Mar√≠a Garc√≠a, mi email es maria@eroski.es, trabajo en Eroski Madrid Centro en la secci√≥n de panader√≠a"*

*(Escribe "cancelar" si cambias de opini√≥n)*"""
        
        return Command(update={
            "current_node": "authenticate",
            "messages": state.get("messages", []) + [AIMessage(content=welcome_message)],
            "awaiting_user_input": True,
            "attempts": 1,
            "auth_data_collected": {},
            "auth_conversation_started": True,
            "last_activity": datetime.now()
        })
    
    async def _continue_llm_conversation(self, state: EroskiState) -> Command:
        """Continuar conversaci√≥n dirigida por LLM"""
        
        try:
            # Obtener decisi√≥n del LLM
            decision = await self._get_llm_decision(state)
            
            # Ejecutar la acci√≥n decidida por el LLM
            return await self._execute_llm_decision(state, decision)
            
        except Exception as e:
            self.logger.error(f"‚ùå Error en conversaci√≥n LLM: {e}")
            return await self._fallback_to_manual_mode(state)
    
    async def _get_llm_decision(self, state: EroskiState) -> ConversationDecision:
        """Obtener decisi√≥n inteligente del LLM"""
        
        # Preparar contexto completo
        context = self._build_conversation_context(state)
        
        # Formatear prompt
        formatted_prompt = self.conversation_prompt.format(**context)
        
        # Invocar LLM
        self.logger.debug("ü§ñ Solicitando decisi√≥n a LLM...")
        response = await self.llm.ainvoke(formatted_prompt)
        
        # Parsear respuesta
        try:
            decision = self.parser.parse(response.content)
            self.logger.info(f"üéØ LLM decidi√≥: {decision.next_action}")
            return decision
            
        except Exception as parse_error:
            self.logger.warning(f"‚ö†Ô∏è Error parseando LLM, usando fallback: {parse_error}")
            return self._create_fallback_decision(state)
    
    async def _execute_llm_decision(self, state: EroskiState, decision: ConversationDecision) -> Command:
        """Ejecutar la decisi√≥n tomada por el LLM"""
        
        # Actualizar datos recopilados
        current_data = state.get("auth_data_collected", {})
        current_data.update(decision.extracted_data)
        
        base_update = {
            "auth_data_collected": current_data,
            "attempts": state.get("attempts", 0) + 1,
            "last_activity": datetime.now(),
            "messages": state.get("messages", []) + [AIMessage(content=decision.message_to_user)]
        }
        
        # Ejecutar acci√≥n espec√≠fica
        if decision.wants_to_cancel:
            return await self._handle_cancellation(state, decision)
            
        elif decision.next_action == "search_db":
            return await self._search_database_and_continue(state, decision, base_update)
            
        elif decision.next_action == "complete":
            return self._complete_authentication(state, decision, base_update)
            
        elif decision.next_action == "collect_data":
            return self._continue_data_collection(state, decision, base_update)
            
        else:  # clarify or unknown
            return self._request_clarification(state, decision, base_update)
    
    # =========================================================================
    # ACCIONES ESPEC√çFICAS
    # =========================================================================
    
    async def _search_database_and_continue(self, state: EroskiState, decision: ConversationDecision, base_update: Dict) -> Command:
        """Buscar en base de datos y continuar conversaci√≥n"""
        
        email = decision.extracted_data.get("email")
        if not email:
            self.logger.warning("‚ö†Ô∏è LLM decidi√≥ buscar en BD pero no hay email")
            return self._continue_data_collection(state, decision, base_update)
        
        # Buscar en base de datos
        db_result = await self._search_employee_database(email)
        
        if db_result["found"]:
            # Usuario encontrado - actualizar con datos de BD
            employee = db_result["employee"]
            
            # Combinar datos de BD con datos recopilados
            enhanced_data = {
                **base_update["auth_data_collected"],
                "name": employee.get("name", decision.extracted_data.get("name")),
                "email": email,
                "employee_id": employee.get("id"),
                "store_name": employee.get("store_name"),
                "registered_store": employee.get("store_name"),
                "department": employee.get("department"),
                "found_in_database": True
            }
            
            # Mensaje personalizado con datos de BD
            enhanced_message = f"""¬°Perfecto! Te he encontrado en nuestro sistema. üëç

‚úÖ **Datos confirmados:**
üë§ {employee.get('name')}
üìß {email}
üè™ Tienda registrada: {employee.get('store_name')}

{decision.message_to_user}"""
            
            base_update.update({
                "auth_data_collected": enhanced_data,
                "authenticated": True,
                "employee_data": employee,
                "messages": state.get("messages", []) + [AIMessage(content=enhanced_message)]
            })
        
        else:
            # Usuario no encontrado - continuar recopilaci√≥n manual
            base_update["auth_data_collected"]["found_in_database"] = False
        
        # Verificar si ya tenemos todos los datos
        if self._has_all_required_data(base_update["auth_data_collected"]):
            return self._complete_authentication(state, decision, base_update)
        else:
            return Command(update=base_update)
    
    def _complete_authentication(self, state: EroskiState, decision: ConversationDecision, base_update: Dict) -> Command:
        """Completar proceso de autenticaci√≥n"""
        
        collected_data = base_update["auth_data_collected"]
        
        # Mensaje de confirmaci√≥n final
        confirmation_message = f"""‚úÖ **¬°Informaci√≥n recopilada correctamente!**

üë§ **Empleado:** {collected_data.get('name')}
üìß **Email:** {collected_data.get('email')}
üè™ **Tienda:** {collected_data.get('store_name')}
üìç **Secci√≥n:** {collected_data.get('section')}

üîß **Ahora cu√©ntame:** ¬øQu√© problema t√©cnico est√°s experimentando?

*(Describe el problema con el mayor detalle posible)*"""
        
        # Preparar datos finales
        final_update = {
            **base_update,
            "authentication_stage": "completed",
            "datos_usuario_completos": True,
            "employee_email": collected_data.get("email"),
            "employee_name": collected_data.get("name"),
            "incident_store_name": collected_data.get("store_name"),
            "incident_section": collected_data.get("section"),
            "ready_for_classification": True,
            "messages": state.get("messages", []) + [AIMessage(content=confirmation_message)]
        }
        
        # Si est√° en BD, agregar datos adicionales
        if collected_data.get("found_in_database"):
            final_update.update({
                "employee_id": collected_data.get("employee_id"),
                "store_id": collected_data.get("store_id"),
                "department": collected_data.get("department")
            })
        
        self.logger.info(f"‚úÖ Autenticaci√≥n completada para: {collected_data.get('name')}")
        return Command(update=final_update)
    
    def _continue_data_collection(self, state: EroskiState, decision: ConversationDecision, base_update: Dict) -> Command:
        """Continuar recopilando datos"""
        
        base_update["awaiting_user_input"] = True
        return Command(update=base_update)
    
    async def _handle_cancellation(self, state: EroskiState, decision: ConversationDecision) -> Command:
        """Manejar solicitud de cancelaci√≥n"""
        
        cancellation_message = """ü§î Entiendo que quieres cancelar.

¬øEst√°s seguro? Si confirmas, cerrar√© esta conversaci√≥n.

**Responde:**
‚Ä¢ **"S√≠"** para cancelar definitivamente
‚Ä¢ **"No"** para continuar con tu consulta üòä"""
        
        return Command(update={
            "awaiting_cancellation_confirmation": True,
            "messages": state.get("messages", []) + [AIMessage(content=cancellation_message)],
            "awaiting_user_input": True,
            "last_activity": datetime.now()
        })
    
    def _request_clarification(self, state: EroskiState, decision: ConversationDecision, base_update: Dict) -> Command:
        """Solicitar clarificaci√≥n al usuario"""
        
        base_update["awaiting_user_input"] = True
        return Command(update=base_update)
    
    # =========================================================================
    # FUNCIONES AUXILIARES
    # =========================================================================
    
    def _build_conversation_context(self, state: EroskiState) -> Dict[str, str]:
        """Construir contexto completo para el LLM"""
        
        # Obtener √∫ltimo mensaje del usuario
        user_message = self._get_last_user_message(state)
        
        # Obtener datos ya recopilados
        collected_data = state.get("auth_data_collected", {})
        
        # Construir historial de conversaci√≥n
        conversation_history = self._get_conversation_summary(state)
        
        # Determinar qu√© campos faltan
        missing_fields = self._get_missing_fields(collected_data)
        
        return {
            "user_message": user_message,
            "collected_data": json.dumps(collected_data, indent=2, ensure_ascii=False),
            "conversation_history": conversation_history,
            "missing_fields": ", ".join(missing_fields),
            "required_fields_desc": json.dumps(self.required_fields, indent=2, ensure_ascii=False),
            "attempt_number": state.get("attempts", 0)
        }
    
    def _get_conversation_summary(self, state: EroskiState) -> str:
        """Obtener resumen de la conversaci√≥n"""
        
        messages = state.get("messages", [])
        if len(messages) <= 2:
            return "Conversaci√≥n reci√©n iniciada"
        
        # Obtener √∫ltimos 3 intercambios
        recent_messages = messages[-6:]  # 3 intercambios = 6 mensajes
        
        summary_parts = []
        for i, msg in enumerate(recent_messages):
            if isinstance(msg, HumanMessage):
                summary_parts.append(f"Usuario: {msg.content[:100]}")
            elif isinstance(msg, AIMessage):
                summary_parts.append(f"Asistente: {msg.content[:100]}")
        
        return " | ".join(summary_parts)
    
    def _get_missing_fields(self, collected_data: Dict) -> List[str]:
        """Determinar qu√© campos a√∫n faltan"""
        
        missing = []
        for field, description in self.required_fields.items():
            if not collected_data.get(field):
                missing.append(field)
        
        return missing
    
    def _has_all_required_data(self, collected_data: Dict) -> bool:
        """Verificar si tenemos todos los datos requeridos"""
        
        return all(collected_data.get(field) for field in self.required_fields.keys())
    
    def _is_authentication_complete(self, state: EroskiState) -> bool:
        """Verificar si la autenticaci√≥n ya est√° completa"""
        
        return (
            state.get("authentication_stage") == "completed" and
            state.get("datos_usuario_completos") and
            state.get("employee_name") and
            state.get("incident_store_name") and
            state.get("incident_section")
        )
    
    def _is_first_visit(self, state: EroskiState) -> bool:
        """Verificar si es la primera visita al nodo"""
        
        return not state.get("auth_conversation_started", False)
    
    def _proceed_to_next_step(self, state: EroskiState) -> Command:
        """Proceder al siguiente paso cuando la autenticaci√≥n est√° completa"""
        
        self.logger.info("‚úÖ Autenticaci√≥n ya completa, procediendo a clasificaci√≥n")
        
        return Command(update={
            "current_node": "authenticate",
            "last_activity": datetime.now()
        })
    
    # =========================================================================
    # B√öSQUEDA EN BASE DE DATOS
    # =========================================================================
    
    async def _search_employee_database(self, email: str) -> Dict[str, Any]:
        """Buscar empleado en base de datos"""
        
        try:
            self.logger.info(f"üîç Buscando empleado en BD: {email}")
            
            employee_data = await self.db_auth.get_employee_by_email(email)
            
            if employee_data:
                self.logger.info(f"‚úÖ Empleado encontrado: {employee_data.get('name')}")
                return {"found": True, "employee": employee_data}
            else:
                self.logger.info("‚ùå Empleado no encontrado en BD")
                return {"found": False}
                
        except Exception as e:
            self.logger.error(f"‚ùå Error buscando en BD: {e}")
            return {"found": False, "error": str(e)}
    
    # =========================================================================
    # MANEJO DE ERRORES Y FALLBACKS
    # =========================================================================
    
    async def _handle_llm_error(self, state: EroskiState, error_message: str) -> Command:
        """Manejar errores del LLM"""
        
        self.logger.error(f"‚ùå Error LLM en autenticaci√≥n: {error_message}")
        
        # Fallback a modo manual
        return await self._fallback_to_manual_mode(state)
    
    async def _fallback_to_manual_mode(self, state: EroskiState) -> Command:
        """Fallback a modo manual cuando LLM falla"""
        
        self.logger.warning("‚ö†Ô∏è Activando modo fallback manual")
        
        fallback_message = """Disculpa, he tenido un problema t√©cnico moment√°neo. üòÖ

Vamos paso a paso. ¬øPodr√≠as decirme tu **nombre completo**?"""
        
        return Command(update={
            "fallback_mode": True,
            "fallback_stage": "requesting_name",
            "messages": state.get("messages", []) + [AIMessage(content=fallback_message)],
            "awaiting_user_input": True,
            "attempts": state.get("attempts", 0) + 1,
            "last_activity": datetime.now()
        })
    
    def _create_fallback_decision(self, state: EroskiState) -> ConversationDecision:
        """Crear decisi√≥n de fallback cuando el parser falla"""
        
        # An√°lisis simple basado en palabras clave
        user_message = self._get_last_user_message(state).lower()
        
        # Detectar cancelaci√≥n
        if any(word in user_message for word in ["cancelar", "salir", "no quiero", "adi√≥s"]):
            return ConversationDecision(
                is_complete=False,
                wants_to_cancel=True,
                extracted_data={},
                next_action="cancel",
                message_to_user="Entiendo que quieres cancelar. ¬øEst√°s seguro?"
            )
        
        # Detectar email
        email_match = re.search(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b', user_message)
        if email_match:
            return ConversationDecision(
                is_complete=False,
                should_search_database=True,
                extracted_data={"email": email_match.group()},
                next_action="search_db",
                message_to_user="Perfecto, d√©jame buscar tu informaci√≥n..."
            )
        
        # Por defecto, continuar recopilando
        return ConversationDecision(
            is_complete=False,
            extracted_data={},
            next_action="collect_data",
            message_to_user="Gracias por la informaci√≥n. ¬øPodr√≠as darme m√°s detalles?"
        )
    
    def _get_last_user_message(self, state: EroskiState) -> str:
        """Obtener √∫ltimo mensaje del usuario"""
        
        messages = state.get("messages", [])
        for msg in reversed(messages):
            if isinstance(msg, HumanMessage):
                return msg.content.strip()
        return ""
    
    # =========================================================================
    # PROMPT DEL LLM CONVERSACIONAL
    # =========================================================================
    
    def _build_conversation_prompt(self) -> PromptTemplate:
        """Construir prompt principal para el LLM conversacional"""
        
        return PromptTemplate(
            template="""Eres un asistente experto de Eroski especializado en recopilar informaci√≥n de empleados de forma natural y eficiente.

OBJETIVO PRINCIPAL:
Recopilar estos datos de manera conversacional:
{required_fields_desc}

DATOS YA RECOPILADOS:
{collected_data}

HISTORIAL DE CONVERSACI√ìN:
{conversation_history}

MENSAJE ACTUAL DEL USUARIO:
"{user_message}"

CAMPOS QUE A√öN FALTAN:
{missing_fields}

INTENTO N√öMERO: {attempt_number}

INSTRUCCIONES PARA TU AN√ÅLISIS:

1. **DETECTAR CANCELACI√ìN**: Si el usuario dice palabras como "cancelar", "salir", "no quiero", "adi√≥s", marcar wants_to_cancel=true

2. **EXTRAER INFORMACI√ìN**: Del mensaje actual, extraer TODA la informaci√≥n disponible:
   - Nombres completos (Juan P√©rez, Mar√≠a Garc√≠a)
   - Emails (cualquier formato, no solo @eroski.es)
   - Nombres de tienda (Eroski + ubicaci√≥n, o c√≥digos)
   - Secciones (carnicer√≠a, caja, panader√≠a, almac√©n, etc.)

3. **DECIDIR PR√ìXIMA ACCI√ìN**:
   - Si extraes un email ‚Üí next_action="search_db" (buscar en base de datos)
   - Si tienes TODOS los campos requeridos ‚Üí next_action="complete"
   - Si faltan campos ‚Üí next_action="collect_data"
   - Si el mensaje es confuso ‚Üí next_action="clarify"

4. **GENERAR MENSAJE NATURAL**:
   - Si extraes email: "Perfecto [nombre], d√©jame buscar tu informaci√≥n..."
   - Si tienes todo: "¬°Excelente! Ya tengo todos tus datos..."
   - Si falta info: "Gracias [nombre/usuario], ¬øpodr√≠as decirme tambi√©n [campo espec√≠fico que falta]?"
   - Si es confuso: "No estoy seguro de entender, ¬øpodr√≠as repetir [lo que necesitas]?"

5. **SER EFICIENTE**: 
   - Extrae M√öLTIPLE informaci√≥n por mensaje
   - No preguntes datos que ya tienes
   - Personaliza usando el nombre si lo sabes

EJEMPLOS DE RESPUESTAS:

Usuario: "Hola, soy Juan P√©rez, mi email es juan@eroski.es, trabajo en Eroski Bilbao Centro"
‚Üí Extraer: name="Juan P√©rez", email="juan@eroski.es", store_name="Eroski Bilbao Centro"
‚Üí next_action="search_db"
‚Üí mensaje="¬°Hola Juan! D√©jame buscar tu informaci√≥n... ¬øEn qu√© secci√≥n espec√≠fica ocurri√≥ el problema?"

Usuario: "Mar√≠a Garc√≠a, maria@empresa.com, Eroski Madrid, panader√≠a"
‚Üí Extraer: name="Mar√≠a Garc√≠a", email="maria@empresa.com", store_name="Eroski Madrid", section="panader√≠a"
‚Üí next_action="complete"
‚Üí mensaje="¬°Perfecto Mar√≠a! Ya tengo toda tu informaci√≥n..."

Usuario: "trabajo en caja en Eroski"
‚Üí Extraer: section="caja", store_name="Eroski"
‚Üí next_action="collect_data"
‚Üí mensaje="Entiendo que trabajas en caja. ¬øPodr√≠as decirme tu nombre y en qu√© Eroski espec√≠fico?"

RESPONDE √öNICAMENTE CON JSON V√ÅLIDO:

{{
    "is_complete": false,
    "should_search_database": false,
    "wants_to_cancel": false,
    "extracted_data": {{}},
    "next_action": "collect_data",
    "message_to_user": "Mensaje natural aqu√≠",
    "missing_fields": [],
    "confidence_level": 0.8
}}""",
            input_variables=["user_message", "collected_data", "conversation_history", "missing_fields", "required_fields_desc", "attempt_number"]
        )


# =============================================================================
# FUNCI√ìN PARA CREAR INSTANCIA
# =============================================================================

async def llm_driven_authenticate_node(state: EroskiState) -> Command:
    """
    Crear instancia del nodo de autenticaci√≥n LLM-driven.
    
    Returns:
        Instancia configurada del nodo
    """
    self.logger.info("üåÑJGL Creating instance of LLMDrivenAuthenticateNode")
    node = LLMDrivenAuthenticateNode()
    return await node.execute(state)

