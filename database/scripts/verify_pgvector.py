# =====================================================
# database/scripts/verify_pgvector.py - Verificar instalaci√≥n pgvector
# =====================================================
"""
Script para verificar que pgvector est√° instalado correctamente.
"""

import asyncio
import asyncpg
import os
from pathlib import Path

async def verify_pgvector():
    """Verificar instalaci√≥n de pgvector"""
    
    # Cargar variables de entorno
    current_dir = Path(__file__).parent
    root_dir = current_dir.parent.parent
    env_file = root_dir / ".env"
    
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                if '=' in line and not line.strip().startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value.strip('"\'')
    
    # Configuraci√≥n de BD
    db_config = {
        "host": os.getenv("DB_HOST", "localhost"),
        "port": int(os.getenv("DB_PORT", 5432)),
        "database": os.getenv("DB_NAME", "chatbot_db"),
        "user": os.getenv("DB_USER", "postgres"),
        "password": os.getenv("DB_PASSWORD", "")
    }
    
    connection_string = (f"postgresql://{db_config['user']}:{db_config['password']}"
                        f"@{db_config['host']}:{db_config['port']}/{db_config['database']}")
    
    print("üîç VERIFICADOR DE PGVECTOR")
    print("=" * 40)
    
    try:
        conn = await asyncpg.connect(connection_string)
        
        # 1. Verificar si la extensi√≥n est√° disponible
        print("\n1Ô∏è‚É£ Verificando disponibilidad de pgvector...")
        
        available_extensions = await conn.fetch("""
            SELECT name, default_version 
            FROM pg_available_extensions 
            WHERE name = 'vector'
        """)
        
        if available_extensions:
            ext = available_extensions[0]
            print(f"   ‚úÖ pgvector disponible - versi√≥n {ext['default_version']}")
        else:
            print("   ‚ùå pgvector NO est√° disponible")
            print("   üí° Verificar que los archivos est√©n copiados correctamente")
            await conn.close()
            return False
        
        # 2. Intentar crear la extensi√≥n
        print("\n2Ô∏è‚É£ Intentando crear extensi√≥n...")
        
        try:
            await conn.execute("CREATE EXTENSION IF NOT EXISTS vector;")
            print("   ‚úÖ Extensi√≥n vector creada/verificada")
        except Exception as e:
            print(f"   ‚ùå Error creando extensi√≥n: {e}")
            await conn.close()
            return False
        
        # 3. Verificar que la extensi√≥n est√° instalada
        print("\n3Ô∏è‚É£ Verificando extensi√≥n instalada...")
        
        installed_extensions = await conn.fetch("""
            SELECT extname, extversion 
            FROM pg_extension 
            WHERE extname = 'vector'
        """)
        
        if installed_extensions:
            ext = installed_extensions[0]
            print(f"   ‚úÖ pgvector instalado - versi√≥n {ext['extversion']}")
        else:
            print("   ‚ùå pgvector NO est√° instalado")
            await conn.close()
            return False
        
        # 4. Probar funcionalidad b√°sica
        print("\n4Ô∏è‚É£ Probando funcionalidad b√°sica...")
        
        try:
            # Crear tabla de prueba con columna vector
            await conn.execute("""
                CREATE TEMP TABLE test_vectors (
                    id SERIAL PRIMARY KEY,
                    embedding vector(3)
                );
            """)
            print("   ‚úÖ Creaci√≥n de tabla con vector: OK")
            
            # Insertar vector de prueba
            await conn.execute("""
                INSERT INTO test_vectors (embedding) 
                VALUES ('[1, 2, 3]');
            """)
            print("   ‚úÖ Inserci√≥n de vector: OK")
            
            # Buscar por similitud
            result = await conn.fetchval("""
                SELECT embedding <-> '[1, 2, 4]' as distance
                FROM test_vectors 
                ORDER BY distance 
                LIMIT 1;
            """)
            print(f"   ‚úÖ B√∫squeda por similitud: OK (distancia = {result:.3f})")
            
        except Exception as e:
            print(f"   ‚ùå Error en prueba de funcionalidad: {e}")
            await conn.close()
            return False
        
        # 5. Verificar operadores disponibles
        print("\n5Ô∏è‚É£ Verificando operadores de distancia...")
        
        operators = await conn.fetch("""
            SELECT oprname, oprleft::regtype, oprright::regtype
            FROM pg_operator 
            WHERE oprname IN ('<->', '<#>', '<=>')
            AND oprleft::regtype::text = 'vector'
            ORDER BY oprname;
        """)
        
        if operators:
            print("   ‚úÖ Operadores de distancia disponibles:")
            for op in operators:
                print(f"      üîπ {op['oprname']} para {op['oprleft']} {op['oprname']} {op['oprright']}")
        else:
            print("   ‚ö†Ô∏è No se encontraron operadores de distancia")
        
        # 6. Informaci√≥n de versi√≥n de PostgreSQL
        print("\n6Ô∏è‚É£ Informaci√≥n del sistema...")
        
        pg_version = await conn.fetchval("SELECT version();")
        print(f"   üìä PostgreSQL: {pg_version.split(',')[0]}")
        
        vector_version = await conn.fetchval("""
            SELECT extversion FROM pg_extension WHERE extname = 'vector'
        """)
        print(f"   üìä pgvector: {vector_version}")
        
        await conn.close()
        
        print("\n" + "=" * 40)
        print("üéâ ¬°PGVECTOR INSTALADO CORRECTAMENTE!")
        print("=" * 40)
        print("\nüéØ PR√ìXIMOS PASOS:")
        print("   1. üîÑ Ejecutar: python database/scripts/setup_db_compatible.py")
        print("   2. üìñ Vectorizar: python database/scripts/vectorize_manual.py")
        print("   3. üß™ Probar: python database/scripts/test_vector_search.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando a la base de datos: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(verify_pgvector())
    if not success:
        print("\nüí° SOLUCIONES POSIBLES:")
        print("   1. Verificar que PostgreSQL est√© ejecut√°ndose")
        print("   2. Verificar que los archivos pgvector est√©n en las carpetas correctas")
        print("   3. Reiniciar PostgreSQL despu√©s de copiar archivos")
        print("   4. Verificar permisos de archivos copiados")