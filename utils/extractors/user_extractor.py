# =====================================================
# utils/extractors/user_extractor.py - Extractor de datos de usuario
# =====================================================
from pydantic import BaseModel, Field
from langchain.output_parsers import PydanticOutputParser
from langchain.prompts import PromptTemplate
from typing import Optional
import logging

from utils.llm.providers import get_llm
from models.user import UsuarioExtracted

logger = logging.getLogger("Extractor.User")

class UsuarioExtraido(BaseModel):
    """Modelo para datos de usuario extra√≠dos"""
    nombre: Optional[str] = Field(None, description="Nombre completo del usuario si se puede identificar")
    email: Optional[str] = Field(None, description="Correo electr√≥nico del usuario si se menciona")
    numero_empleado: Optional[str] = Field(None, description="N√∫mero de empleado si se menciona")
    confianza_nombre: float = Field(0.0, description="Confianza en la extracci√≥n del nombre (0-1)")
    confianza_email: float = Field(0.0, description="Confianza en la extracci√≥n del email (0-1)")

# Parser para convertir respuesta LLM a objeto Pydantic
parser = PydanticOutputParser(pydantic_object=UsuarioExtraido)

# Template del prompt para extracci√≥n
extraction_prompt = PromptTemplate(
    template="""
Analiza el siguiente mensaje del usuario y extrae la informaci√≥n personal si est√° presente.

Instrucciones:
- Extrae SOLO informaci√≥n expl√≠citamente mencionada
- NO inventes o asumas informaci√≥n que no est√© clara
- Asigna confianza alta (0.8-1.0) solo si la informaci√≥n es muy clara
- Asigna confianza media (0.5-0.7) si hay alguna ambig√ºedad  
- Asigna confianza baja (0.1-0.4) si la informaci√≥n es poco clara

Ejemplos de extracci√≥n:
- "Hola, soy Juan P√©rez" ‚Üí nombre: "Juan P√©rez", confianza_nombre: 0.9
- "Mi email es juan@empresa.com" ‚Üí email: "juan@empresa.com", confianza_email: 0.95
- "Creo que soy Juan" ‚Üí nombre: "Juan", confianza_nombre: 0.3
- "juan en empresa punto com" ‚Üí email: "juan@empresa.com", confianza_email: 0.6

Mensaje del usuario: {mensaje}

{format_instructions}
""",
    input_variables=["mensaje"],
    partial_variables={"format_instructions": parser.get_format_instructions()}
)

async def extraer_datos_usuario(mensaje: str) -> UsuarioExtraido:
    """
    Extraer datos de usuario de un mensaje usando LLM.
    
    Args:
        mensaje: Mensaje del usuario del cual extraer datos
        
    Returns:
        UsuarioExtraido con los datos encontrados y niveles de confianza
    """
    try:
        logger.debug(f"üîç Extrayendo datos de: {mensaje[:50]}...")
        
        # Obtener LLM
        llm = get_llm()
        
        # Formatear prompt
        formatted_prompt = extraction_prompt.format(mensaje=mensaje)
        
        # Ejecutar extracci√≥n
        response = await llm.ainvoke(formatted_prompt)
        
        # Parsear respuesta
        extracted_data = parser.parse(response.content)
        
        logger.info(f"‚úÖ Extracci√≥n completada - Nombre: {extracted_data.nombre} (conf: {extracted_data.confianza_nombre}), Email: {extracted_data.email} (conf: {extracted_data.confianza_email})")
        
        return extracted_data
        
    except Exception as e:
        logger.error(f"‚ùå Error en extracci√≥n de usuario: {e}")
        # Retornar objeto vac√≠o en caso de error
        return UsuarioExtraido()

