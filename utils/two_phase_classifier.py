# =====================================================
# CLASIFICACI√ìN EN DOS FASES CON ESTADO EroskiState
# =====================================================

from typing import Dict, Any, Optional, List
from langchain_core.messages import AIMessage, HumanMessage
from langgraph.types import Command
from datetime import datetime
import logging
from pydantic import BaseModel, Field

from models.eroski_state import EroskiState
from utils.llm.providers import get_llm
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser

# =============================================================================
# MODELOS PARA LAS DOS FASES
# =============================================================================

class IncidentTypeDecision(BaseModel):
    """Decisi√≥n de la FASE 1: Identificaci√≥n del tipo de incidencia"""
    
    incident_type_identified: bool = Field(description="Si se identific√≥ el tipo de incidencia")
    incident_type: Optional[str] = Field(description="Tipo identificado (balanza, tpv, impresora, etc.)")
    confidence_level: float = Field(description="Confianza en la identificaci√≥n (0-1)")
    keywords_detected: List[str] = Field(description="Palabras clave que llevaron a la identificaci√≥n", default=[])
    additional_info: Optional[str] = Field(description="Informaci√≥n adicional relevante detectada", default=None)
    reasoning: str = Field(description="Razonamiento de por qu√© se identific√≥ este tipo")
    needs_clarification: bool = Field(description="Si necesita m√°s informaci√≥n para identificar", default=False)

class SpecificProblemDecision(BaseModel):
    """Decisi√≥n de la FASE 2: Identificaci√≥n del problema espec√≠fico"""
    
    problem_identified: bool = Field(description="Si se identific√≥ el problema espec√≠fico")
    specific_problem: Optional[str] = Field(description="Problema espec√≠fico del cat√°logo")
    problem_description: Optional[str] = Field(
        description="Descripci√≥n del problema (puede ser 'otros')", 
        default="No especificado"
    )
    solution_available: bool = Field(description="Si hay soluci√≥n disponible para este problema")
    proposed_solution: Optional[str] = Field(description="Soluci√≥n propuesta si est√° disponible")
    additional_info: Optional[str] = Field(description="Informaci√≥n adicional sobre el problema", default=None)
    confidence_level: float = Field(description="Confianza en la identificaci√≥n del problema (0-1)")
    next_action: str = Field(description="Pr√≥xima acci√≥n: provide_solution, ask_details, escalate")

# =============================================================================
# PROMPTS PARA LAS DOS FASES
# =============================================================================

def build_phase_1_prompt() -> PromptTemplate:
    """
    FASE 1: Identificar TIPO de incidencia
    
    Objetivo: Determinar si es balanza, TPV, impresora, red, etc.
    Actualiza: state.incident_type + state.additional_info
    """
    return PromptTemplate(
        template="""Eres un especialista en identificaci√≥n de TIPOS de incidencias t√©cnicas en Eroski.

üéØ **MISI√ìN FASE 1:** Identificar √öNICAMENTE el TIPO de equipo/sistema con problemas.

EMPLEADO: {employee_name} - Secci√≥n: {section} - Tienda: {store_name}

TIPOS DE EQUIPOS DISPONIBLES:
{equipment_types}

HISTORIAL COMPLETO DE MENSAJES:
{conversation_history}

√öLTIMO MENSAJE: "{user_message}"

üîç **AN√ÅLISIS REQUERIDO:**

1Ô∏è‚É£ **Identificar el EQUIPO/SISTEMA:**
   - ¬øMenciona directamente un equipo? (balanza, TPV, impresora, ordenador...)
   - ¬øSe puede inferir por la secci√≥n? (carnicer√≠a ‚Üí probable balanza)
   - ¬øHay palabras clave t√©cnicas? (etiquetas, pantalla, peso, conexi√≥n...)

2Ô∏è‚É£ **Evaluar CONFIANZA:**
   - Alta (>0.8): Menci√≥n directa o contexto muy claro
   - Media (0.5-0.8): Se puede inferir razonablemente
   - Baja (<0.5): Muy vago o ambiguo

3Ô∏è‚É£ **Capturar INFORMACI√ìN ADICIONAL:**
   - S√≠ntomas mencionados
   - Detalles t√©cnicos
   - Contexto temporal (desde cu√°ndo, frecuencia...)

‚úÖ **EJEMPLOS DE IDENTIFICACI√ìN CORRECTA:**

**Ejemplo A - Menci√≥n directa:**
Usuario: "la balanza no funciona bien"
‚Üí incident_type: "balanza", confidence: 0.95

**Ejemplo B - Inferencia por contexto:**
Usuario: "problema con las etiquetas" + Secci√≥n: "carnicer√≠a"
‚Üí incident_type: "balanza", confidence: 0.85

**Ejemplo C - S√≠ntoma t√©cnico:**
Usuario: "no puedo cobrar" + Secci√≥n: "caja"
‚Üí incident_type: "tpv", confidence: 0.8

**Ejemplo D - Informaci√≥n insuficiente:**
Usuario: "no funciona"
‚Üí incident_type_identified: false, needs_clarification: true

RESPONDE √öNICAMENTE CON JSON:
{{
  "incident_type_identified": true/false,
  "incident_type": "balanza|tpv|impresora|red|ordenador|telefono|otros",
  "confidence_level": 0.0-1.0,
  "keywords_detected": ["palabra1", "palabra2"],
  "additional_info": "Informaci√≥n relevante detectada",
  "reasoning": "Raz√≥n por la que identifiqu√© este tipo",
  "needs_clarification": true/false
}}""",
        input_variables=[
            "employee_name", "section", "store_name", "equipment_types",
            "conversation_history", "user_message"
        ]
    )

def build_phase_2_prompt() -> PromptTemplate:
    """
    FASE 2: Identificar PROBLEMA ESPEC√çFICO - PROMPT MEJORADO
    """
    return PromptTemplate(
        template="""üéØ **MISI√ìN FASE 2:** Identificar el PROBLEMA ESPEC√çFICO dentro de {incident_type}.

INFORMACI√ìN DE FASE 1:
- Tipo identificado: {incident_type}
- Informaci√≥n adicional: {phase1_additional_info}
- Confianza Fase 1: {phase1_confidence}

PROBLEMAS ESPEC√çFICOS DISPONIBLES PARA {incident_type}:
{specific_problems_catalog}

HISTORIAL COMPLETO:
{conversation_history}

√öLTIMO MENSAJE: "{user_message}"

üîç **AN√ÅLISIS DE PROBLEMA ESPEC√çFICO:**

1Ô∏è‚É£ **Buscar COINCIDENCIA EXACTA:**
   - ¬øEl usuario describe exactamente uno de los problemas del cat√°logo?
   - ¬øUsa palabras clave que coinciden directamente?

2Ô∏è‚É£ **Buscar COINCIDENCIA PARCIAL:**
   - ¬øLos s√≠ntomas coinciden con alg√∫n problema conocido?
   - ¬øSe puede inferir cu√°l es el problema m√°s probable?

3Ô∏è‚É£ **Evaluar si es PROBLEMA NO CATALOGADO:**
   - Si no coincide con ninguno ‚Üí problem_description: "otros"
   - Capturar descripci√≥n del usuario en additional_info

RESPONDE √öNICAMENTE CON JSON V√ÅLIDO:
{{
  "problem_identified": true/false,
  "specific_problem": "Problema exacto del cat√°logo o null",
  "problem_description": "Descripci√≥n del problema o 'otros' - NUNCA null",
  "solution_available": true/false,
  "proposed_solution": "Soluci√≥n paso a paso o null",
  "additional_info": "Informaci√≥n adicional capturada o null",
  "confidence_level": 0.0-1.0,
  "next_action": "provide_solution|ask_details|escalate"
}}

‚ö†Ô∏è **IMPORTANTE:** 
- problem_description NUNCA debe ser null, siempre un string
- Si no hay descripci√≥n clara, usar "Problema no especificado"
- Si es problema no catalogado, usar "otros"
""",
        input_variables=[
            "incident_type", "phase1_additional_info", "phase1_confidence",
            "specific_problems_catalog", "conversation_history", "user_message"
        ]
    )
# =============================================================================
# L√ìGICA PRINCIPAL DE CLASIFICACI√ìN EN DOS FASES
# =============================================================================

class TwoPhaseClassifier:
    """
    Clasificador en dos fases que usa EroskiState como canal de comunicaci√≥n
    """
    
    def __init__(self):
        self.llm = get_llm()
        self.logger = logging.getLogger("TwoPhaseClassifier")
        
        # Parsers para cada fase
        self.phase1_parser = JsonOutputParser(pydantic_object=IncidentTypeDecision)
        self.phase2_parser = JsonOutputParser(pydantic_object=SpecificProblemDecision)
        
        # Prompts para cada fase
        self.phase1_prompt = build_phase_1_prompt()
        self.phase2_prompt = build_phase_2_prompt()
    
    async def classify_incident(self, state: EroskiState) -> Command:
        """
        Ejecutar clasificaci√≥n en dos fases usando EroskiState
        
        Args:
            state: Estado actual con mensajes e informaci√≥n del empleado
            
        Returns:
            Command con estado actualizado
        """
        
        # ‚úÖ FASE 1: Identificar TIPO de incidencia
        if not state.get("incident_type"):
            self.logger.info("üîç FASE 1: Identificando tipo de incidencia...")
            
            phase1_result = await self._execute_phase_1(state)
            
            if phase1_result.incident_type_identified and phase1_result.confidence_level >= 0.7:
                # Actualizar estado con tipo identificado
                updated_state = self._update_state_after_phase1(state, phase1_result)
                
                self.logger.info(f"‚úÖ FASE 1 COMPLETADA: {phase1_result.incident_type} (confianza: {phase1_result.confidence_level})")
                
                # Continuar inmediatamente a FASE 2
                return await self._execute_phase_2_with_state(updated_state)
            
            elif phase1_result.needs_clarification:
                # Necesita m√°s informaci√≥n para identificar tipo
                return self._ask_for_type_clarification(state, phase1_result)
            
            else:
                # Confianza baja, pedir m√°s informaci√≥n
                return self._ask_general_clarification(state)
        
        # ‚úÖ FASE 2: Identificar PROBLEMA ESPEC√çFICO
        else:
            self.logger.info(f"üîç FASE 2: Identificando problema espec√≠fico para {state.get('incident_type')}...")
            return await self._execute_phase_2_with_state(state)
    
    async def _execute_phase_1(self, state: EroskiState) -> IncidentTypeDecision:
        """Ejecutar FASE 1: Identificaci√≥n del tipo"""
        
        auth_data = state.get("auth_data_collected", {})
        
        # Preparar datos para el prompt
        prompt_data = {
            "employee_name": auth_data.get("name", "No especificado"),
            "section": auth_data.get("section", "No especificado"),
            "store_name": auth_data.get("store_name", "No especificado"),
            "equipment_types": self._get_equipment_types_list(),
            "conversation_history": self._format_conversation_history(state),
            "user_message": self._get_last_user_message(state)
        }
        
        # Ejecutar LLM Fase 1
        formatted_prompt = self.phase1_prompt.format(**prompt_data)
        response = await self.llm.ainvoke(formatted_prompt)
        
        # Parsear respuesta
        decision_data = self.phase1_parser.parse(response.content)
        return IncidentTypeDecision(**decision_data)
    
    async def _execute_phase_2_with_state(self, state: EroskiState) -> Command:
        """Ejecutar FASE 2 con validaci√≥n mejorada"""
        
        try:
            # Ejecutar Fase 2
            phase2_result = await self._execute_phase_2(state)
            
            # ‚úÖ VALIDACI√ìN ADICIONAL: Verificar que problem_description no sea None
            if phase2_result.problem_description is None:
                self.logger.warning("‚ö†Ô∏è problem_description es None, aplicando fallback")
                
                # Crear una nueva instancia con valores por defecto
                phase2_result = SpecificProblemDecision(
                    problem_identified=phase2_result.problem_identified,
                    specific_problem=phase2_result.specific_problem,
                    problem_description="Problema no especificado",  # ‚úÖ Valor por defecto
                    solution_available=phase2_result.solution_available,
                    proposed_solution=phase2_result.proposed_solution,
                    additional_info=phase2_result.additional_info,
                    confidence_level=phase2_result.confidence_level,
                    next_action=phase2_result.next_action
                )
            
            # Procesar resultado seg√∫n el next_action
            if phase2_result.next_action == "provide_solution" and phase2_result.solution_available:
                return self._provide_solution_response(state, phase2_result)
            
            elif phase2_result.next_action == "ask_details":
                return self._ask_for_more_details(state, phase2_result)
            
            elif phase2_result.next_action == "escalate":
                return self._escalate_incident(state, phase2_result)
            
            else:
                # Fallback por defecto
                return self._ask_for_more_details(state, phase2_result)
                
        except Exception as e:
            self.logger.error(f"‚ùå Error en Fase 2: {e}")
            
            # ‚úÖ MANEJO ROBUSTO DE ERRORES
            return Command(
                update={
                    **state,
                    "last_error": f"Error en clasificaci√≥n: {str(e)}",
                    "needs_escalation": True
                },
                graph=self._create_error_response_with_escalation(state, str(e))
            )

    
    def _create_error_response_with_escalation(self, state: EroskiState, error_message: str) -> EroskiState:
        """Crear respuesta de error con escalaci√≥n autom√°tica"""
        
        error_response = (
            "‚ö†Ô∏è **Error Temporal**\n\n"
            "Ha ocurrido un problema t√©cnico durante la clasificaci√≥n de tu incidencia.\n\n"
            "Por favor, intenta describir tu problema de nuevo o solicita hablar con un supervisor.\n\n"
            "Error t√©cnico registrado para nuestro equipo de sistemas."
        )
        
        updated_state = {
            **state,
            "messages": state["messages"] + [AIMessage(content=error_response)],
            "needs_escalation": True,
            "escalation_reason": f"Error t√©cnico: {error_message}",
            "current_node": "escalate"
        }
        
        return updated_state
    
    def _update_state_after_phase1(self, state: EroskiState, phase1_result: IncidentTypeDecision) -> EroskiState:
        """Actualizar estado despu√©s de FASE 1"""
        
        updated_state = dict(state)
        
        # Actualizar campos del estado
        updated_state.update({
            "incident_type": phase1_result.incident_type,
            "additional_info": phase1_result.additional_info,
            "confidence_score": phase1_result.confidence_level,
            "last_activity": datetime.now()
        })
        
        return EroskiState(updated_state)
    
    def _process_phase2_result(self, state: EroskiState, phase2_result: SpecificProblemDecision) -> Command:
        """Procesar resultado de FASE 2 y generar respuesta"""
        
        # Actualizar estado con resultado de FASE 2
        updated_state = dict(state)
        updated_state.update({
            "incident_description": phase2_result.problem_description,
            "solution_found": phase2_result.solution_available,
            "solution_content": phase2_result.proposed_solution,
            "last_activity": datetime.now()
        })
        
        # Combinar informaci√≥n adicional de ambas fases
        existing_additional_info = updated_state.get("additional_info", "")
        new_additional_info = phase2_result.additional_info or ""
        
        if new_additional_info and existing_additional_info:
            combined_info = f"{existing_additional_info} | {new_additional_info}"
        else:
            combined_info = new_additional_info or existing_additional_info
        
        updated_state["additional_info"] = combined_info
        
        # Decidir pr√≥xima acci√≥n basada en el resultado
        if phase2_result.next_action == "provide_solution" and phase2_result.solution_available:
            return self._provide_solution(updated_state, phase2_result)
        
        elif phase2_result.next_action == "ask_details":
            return self._ask_for_problem_details(updated_state, phase2_result)
        
        elif phase2_result.next_action == "escalate":
            return self._escalate_complex_problem(updated_state, phase2_result)
        
        else:
            # Fallback: pedir m√°s detalles
            return self._ask_for_problem_details(updated_state, phase2_result)
    
    def _provide_solution(self, state: EroskiState, phase2_result: SpecificProblemDecision) -> Command:
        """Proporcionar soluci√≥n identificada"""
        
        incident_code = state.get("incident_code", "N/A")
        
        solution_message = f"""‚úÖ **Problema identificado: {state.get('incident_type', '').title()}**

üìã **Problema espec√≠fico:** {phase2_result.specific_problem}

üîß **Soluci√≥n paso a paso:**
{phase2_result.proposed_solution}

ü§î **¬øQuieres intentar esta soluci√≥n?**
‚Ä¢ Responde **'s√≠'** para que te gu√≠e paso a paso
‚Ä¢ Responde **'no entiendo'** si necesitas m√°s explicaci√≥n
‚Ä¢ Responde **'ya lo intent√©'** si ya probaste esto

üìã *C√≥digo de incidencia: {incident_code}*"""
        
        return Command(
            update={
                "messages": state["messages"] + [AIMessage(content=solution_message)],
                "current_step": "verify_solution",
                "awaiting_user_input": True,
                "solution_provided": True
            }
        )
    
    def _ask_for_problem_details(self, state: EroskiState, phase2_result: SpecificProblemDecision) -> Command:
        """Pedir m√°s detalles sobre el problema"""
        
        incident_type = state.get("incident_type", "equipo")
        
        if phase2_result.problem_description == "otros":
            # Problema no catalogado
            message = f"""üîç **Problema con {incident_type.title()} - Informaci√≥n adicional necesaria**

He identificado que tienes un problema con **{incident_type}**, pero necesito m√°s detalles espec√≠ficos para ayudarte mejor.

üìã **Por favor, describe:**
‚Ä¢ ¬øQu√© s√≠ntomas observas exactamente?
‚Ä¢ ¬øCu√°ndo empez√≥ el problema?
‚Ä¢ ¬øHas intentado algo para solucionarlo?
‚Ä¢ ¬øAparece alg√∫n mensaje de error?

üí° *Cuanto m√°s espec√≠fico seas, mejor podr√© ayudarte*"""
        
        else:
            # Informaci√≥n insuficiente para identificar problema espec√≠fico
            available_problems = self._get_specific_problems_for_type(incident_type)
            
            message = f"""üîç **Problema con {incident_type.title()} - ¬øCu√°l es tu caso espec√≠fico?**

He identificado que el problema es con **{incident_type}**. Para darte la soluci√≥n exacta, ¬øcu√°l de estos describe mejor tu situaci√≥n?

{available_problems}

üìù **O describe tu problema con m√°s detalle si no coincide con ninguno de estos.**"""
        
        return Command(
            update={
                "messages": state["messages"] + [AIMessage(content=message)],
                "current_step": "collect_details",
                "awaiting_user_input": True
            }
        )
    
    # ========== M√âTODOS AUXILIARES ==========
    
    def _get_equipment_types_list(self) -> str:
        """Obtener lista formateada de tipos de equipos"""
        return """
‚Ä¢ **Balanza** - Equipos de pesado y etiquetado
‚Ä¢ **TPV** - Terminales de punto de venta (cajas)
‚Ä¢ **Impresora** - Impresoras de tickets, etiquetas, c√≥digos de barras
‚Ä¢ **Ordenador** - PCs, terminales, tablets
‚Ä¢ **Red** - Problemas de conectividad, WiFi, internet
‚Ä¢ **Tel√©fono** - Tel√©fonos fijos, intercomunicadores
‚Ä¢ **Otros** - Otros equipos t√©cnicos
"""
    
    def _get_specific_problems_for_type(self, incident_type: str) -> str:
        """Obtener problemas espec√≠ficos para un tipo de equipo"""
        
        problems_catalog = {
            "balanza": """
‚Ä¢ **La balanza no imprime etiquetas**
‚Ä¢ **La balanza no se enciende**
‚Ä¢ **El peso mostrado es incorrecto**
‚Ä¢ **Error de calibraci√≥n**
‚Ä¢ **La pantalla no responde**
‚Ä¢ **Las etiquetas salen en blanco**
‚Ä¢ **Problemas con el teclado de la balanza**
""",
            "tpv": """
‚Ä¢ **El TPV no enciende**
‚Ä¢ **No lee tarjetas de cr√©dito**
‚Ä¢ **Error en el caj√≥n de efectivo**
‚Ä¢ **Problemas con el lector de c√≥digos de barras**
‚Ä¢ **La pantalla t√°ctil no responde**
‚Ä¢ **No imprime tickets**
‚Ä¢ **Error de comunicaci√≥n con el servidor**
""",
            "impresora": """
‚Ä¢ **No imprime documentos**
‚Ä¢ **Impresi√≥n borrosa o con l√≠neas**
‚Ä¢ **Atasco de papel**
‚Ä¢ **Error de tinta o t√≥ner**
‚Ä¢ **No reconoce el formato de papel**
‚Ä¢ **Problemas de conectividad**
""",
            "red": """
‚Ä¢ **Sin conexi√≥n a internet**
‚Ä¢ **WiFi muy lento**
‚Ä¢ **No puede acceder a aplicaciones corporativas**
‚Ä¢ **Error de conexi√≥n intermitente**
‚Ä¢ **Problemas con VPN**
""",
            "ordenador": """
‚Ä¢ **El ordenador no enciende**
‚Ä¢ **Pantalla azul o error del sistema**
‚Ä¢ **Muy lento al trabajar**
‚Ä¢ **No reconoce dispositivos USB**
‚Ä¢ **Problemas con aplicaciones espec√≠ficas**
""",
            "telefono": """
‚Ä¢ **No hay l√≠nea telef√≥nica**
‚Ä¢ **No se escucha al otro lado**
‚Ä¢ **Problemas con extensiones internas**
‚Ä¢ **Error en el sistema de intercomunicaci√≥n**
"""
        }
        
        return problems_catalog.get(incident_type, "‚Ä¢ Problemas t√©cnicos diversos")
    
    def _format_conversation_history(self, state: EroskiState) -> str:
        """Formatear historial de conversaci√≥n"""
        messages = state.get("messages", [])
        formatted = []
        
        for msg in messages:
            if isinstance(msg, HumanMessage):
                formatted.append(f"üë§ Usuario: {msg.content}")
            elif isinstance(msg, AIMessage):
                formatted.append(f"ü§ñ Asistente: {msg.content}")
        
        return "\n".join(formatted) if formatted else "Sin historial previo"
    
    def _get_last_user_message(self, state: EroskiState) -> str:
        """Obtener √∫ltimo mensaje del usuario"""
        messages = state.get("messages", [])
        
        for msg in reversed(messages):
            if isinstance(msg, HumanMessage):
                return msg.content
        
        return ""

# =============================================================================
# INTEGRACI√ìN CON EL NODO CLASSIFY
# =============================================================================

async def execute_two_phase_classification(state: EroskiState) -> Command:
    """
    Funci√≥n principal para ejecutar clasificaci√≥n en dos fases
    
    Args:
        state: Estado actual con EroskiState
        
    Returns:
        Command con estado actualizado
    """
    
    classifier = TwoPhaseClassifier()
    return await classifier.classify_incident(state)
